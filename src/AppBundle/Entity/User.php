<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter - 2019
 */

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * User
 *
 * @ORM\Table(name="user", uniqueConstraints={@ORM\UniqueConstraint(name="email_UNIQUE", columns={"email"})})
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 */
class User implements UserInterface, \Serializable
{
    // checkMX : permet de s’assurer qu’il existe au moins un champ MX et c’est ce qui est important pour envoyer un mail.
     /**
     * @ORM\Column(type="string", length=255)
     * @Assert\Email(
     *      message = "L'email '{{ value }}' est invalide.",
     *      checkMX = true
     * )
     */
     private $email;

     // Contrainte de longueur ne fonctionne pas pour l'inscription car on l'écrase
     // dans le RegisterUserType avec d'autres contraintes (donc l'ajouter là bas)
    /**
     * @ORM\Column(type="string", length=255)
     * @Assert\Length(min=6)
     */
    private $password;

    /**
     * @var string
     *
     * @ORM\Column(name="pseudo", type="string", length=45, nullable=false)
     * @Assert\Length(min=2)
     */
    private $pseudo;

    /**
     * @var string
     *
     * @ORM\Column(name="first_name", type="string", length=45, nullable=true)
     * @Assert\Length(min=2)
     */
    private $firstName;

    /**
     * @var string
     *
     * @ORM\Column(name="last_name", type="string", length=45, nullable=true)
     * @Assert\Length(min=2)
     */
    private $lastName;

    /**
     * @var boolean
     *
     * @ORM\Column(name="sexe", type="boolean", nullable=true)
     */
    private $sexe;

    /**
     * @var string
     *
     * @ORM\Column(name="photo", type="string", length=255, nullable=true)
     */
    private $photo;

    /**
     * DC2Type:array
     *
     * @ORM\Column(type="array")
     */
    private $roles;

    /**
     * @var boolean
     *
     * @ORM\Column(name="actif", type="boolean", nullable=false)
     */
    private $actif;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="creationDate", type="datetime", nullable=false)
     */
    private $creationdate;

    /**
     * @var string
     *
     * @ORM\Column(name="email_temp", type="string", length=255, nullable=true)
     */
    private $emailTemp;

    /**
     * @var string
     *
     * @ORM\Column(name="email_token", type="string", length=255, nullable=true)
     */
    private $emailToken;

    /**
     * @var string
     *
     * @ORM\Column(name="lost_password_token", type="string", length=255, nullable=true)
     */
    private $lostPasswordToken;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="lost_password_date", type="datetime", nullable=true)
     */
    private $lostPasswordDate;

    /**
     * @var integer
     *
     * @ORM\Column(type="integer", options={"unsigned":true})
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    // Un utilisateur est lié à (= a mis sur le site) 0, 1, ou plusieurs Track(s) : Relation OneToMany bidirectionnelle
    /**
     * @ORM\OneToMany(targetEntity="Track", mappedBy="user", cascade={"persist", "remove"}, orphanRemoval=true)
     * @ORM\OrderBy({"id" = "DESC"})
     */
    private $userTracks;

    // Un utilisateur est lié à (= a mis sur le site) 0, 1, ou plusieurs Message(s) : Relation OneToMany bidirectionnelle
    /**
     * @ORM\OneToMany(targetEntity="Message", mappedBy="user", cascade={"persist", "remove"}, orphanRemoval=true)
     * @ORM\OrderBy({"id" = "DESC"})
     */
    private $userMessages;



    // CONSTRUCTEUR avec valeurs par défaut : champ roles (ROLE_USER) et date de création (date actuelle)
    public function __construct()
    {
        $this->setRoles(['ROLE_USER']);
        $this->setCreationDate(new \DateTime());
    }



    /**
     * Set email
     *
     * @param string $email
     *
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set pseudo
     *
     * @param string $pseudo
     *
     * @return User
     */
    public function setPseudo($pseudo)
    {
        $this->pseudo = $pseudo;

        return $this;
    }

    /**
     * Get pseudo
     *
     * @return string
     */
    public function getPseudo()
    {
        return $this->pseudo;
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set sexe
     *
     * @param boolean $sexe
     *
     * @return User
     */
    public function setSexe($sexe)
    {
        $this->sexe = $sexe;

        return $this;
    }

    /**
     * Get sexe
     *
     * @return boolean
     */
    public function getSexe()
    {
        return $this->sexe;
    }

    /**
     * Set photo
     *
     * @param string $photo
     *
     * @return User
     */
    public function setPhoto($photo)
    {
        $this->photo = $photo;

        return $this;
    }

    /**
     * Get photo
     *
     * @return string
     */
    public function getPhoto()
    {
        return $this->photo;
    }

    /**
     * Set roles
     *
     * @param array $roles
     *
     * @return User
     */
    public function setRoles($roles)
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * Get roles
     *
     * @return array
     */
    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * Add a role
     *
     * @param string $role
     * @return User
     */
    public function addRole($role){
        $roles = $this->getRoles();
        if(!in_array($role, $roles)){
            $this->setRoles(array_merge($roles, array($role)));
        }
        return $this;
    }

    /**
     * Remove a role
     *
     * @param string $role
     * @return User
     */
    public function removeRole($role){
        $roles = $this->getRoles();
        if(in_array($role, $roles)){
            $this->setRoles(array_diff($roles, array($role)));
        }
        return $this;
    }

    /**
     * Set actif
     *
     * @param boolean $actif
     *
     * @return User
     */
    public function setActif($actif)
    {
        $this->actif = $actif;

        return $this;
    }

    /**
     * Get actif
     *
     * @return boolean
     */
    public function getActif()
    {
        return $this->actif;
    }

    /**
     * Set creationdate
     *
     * @param \DateTime $creationdate
     *
     * @return User
     */
    public function setCreationdate($creationdate)
    {
        $this->creationdate = $creationdate;

        return $this;
    }

    /**
     * Get creationdate
     *
     * @return \DateTime
     */
    public function getCreationdate()
    {
        return $this->creationdate;
    }

    /**
     * Set emailTemp
     *
     * @param string $emailTemp
     *
     * @return User
     */
    public function setEmailTemp($emailTemp)
    {
        $this->emailTemp = $emailTemp;

        return $this;
    }

    /**
     * Get emailTemp
     *
     * @return string
     */
    public function getEmailTemp()
    {
        return $this->emailTemp;
    }

    /**
     * Set emailToken
     *
     * @param string $emailToken
     *
     * @return User
     */
    public function setEmailToken($emailToken)
    {
        $this->emailToken = $emailToken;

        return $this;
    }

    /**
     * Get emailToken
     *
     * @return string
     */
    public function getEmailToken()
    {
        return $this->emailToken;
    }

    /**
     * Set lostPasswordToken
     *
     * @param string $lostPasswordToken
     *
     * @return User
     */
    public function setLostPasswordToken($lostPasswordToken)
    {
        $this->lostPasswordToken = $lostPasswordToken;

        return $this;
    }

    /**
     * Get lostPasswordToken
     *
     * @return string
     */
    public function getLostPasswordToken()
    {
        return $this->lostPasswordToken;
    }

    /**
     * Set lostPasswordDate
     *
     * @param \DateTime $lostPasswordDate
     *
     * @return User
     */
    public function setLostPasswordDate($lostPasswordDate)
    {
        $this->lostPasswordDate = $lostPasswordDate;

        return $this;
    }

    /**
     * Get lostPasswordDate
     *
     * @return \DateTime
     */
    public function getLostPasswordDate()
    {
        return $this->lostPasswordDate;
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    // Pour la relation OneToMany avec Track : Add, Remove, Get (pas de setter car se fait dans Track = entité propriétaire)
    /**
     * Add userTrack
     *
     * @param \AppBundle\Entity\Track $userTrack
     *
     * @return User
     */
    public function addUserTrack(Track $userTrack)
    {
        $this->userTracks[] = $userTrack;

        return $this;
    }

    /**
     * Remove userTrack
     *
     * @param \AppBundle\Entity\Track $userTrack
     */
    public function removeUserTrack(Track $userTrack)
    {
        $this->userTracks->removeElement($userTrack);
    }

    /**
     * Get userTracks
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserTracks()
    {
        return $this->userTracks;
    }

    // Pour la relation OneToMany avec Message : Add, Remove, Get (pas de setter car se fait dans Message = entité propriétaire)
    /**
     * Add userMessage
     *
     * @param \AppBundle\Entity\Message $userMessage
     *
     * @return User
     */
    public function addUserMessage(Message $userMessage)
    {
        $this->userMessages[] = $userMessage;

        return $this;
    }

    /**
     * Remove userMessage
     *
     * @param \AppBundle\Entity\Message $userMessage
     */
    public function removeUserMessage(Message $userMessage)
    {
        $this->userMessages->removeElement($userMessage);
    }

    /**
     * Get userMessages
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserMessages()
    {
        return $this->userMessages;
    }


    // Ces fontions ci-dessous (serialize - unserialize - getSalt - getUsername - eraseCredentials
    // sont nécessaire pour que la classe User implements UserInterface, \Serializable (tout en haut)
    /**
     * String representation of object
     * @link https://php.net/manual/en/serializable.serialize.php
     * @return string the string representation of the object or null
     * @since 5.1.0
     */
    public function serialize()
    {
        // TODO: Implement serialize() method.
    }

    /**
     * Constructs the object
     * @link https://php.net/manual/en/serializable.unserialize.php
     * @param string $serialized <p>
     * The string representation of the object.
     * </p>
     * @return void
     * @since 5.1.0
     */
    public function unserialize($serialized)
    {
        // TODO: Implement unserialize() method.
    }

    /**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string|null The salt
     */
    public function getSalt()
    {
        // TODO: Implement getSalt() method.
        // The bcrypt and argon2i algorithms don't require a separate salt.
        // You *may* need a real salt if you choose a different encoder.
        return null;
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */
    public function getUsername()
    {
        // TODO: Implement getUsername() method.
    }

    /**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials()
    {
        // TODO: Implement eraseCredentials() method.
    }
}
